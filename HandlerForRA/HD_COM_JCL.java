/* * 2014.09.12 JCL ���Ͽ� ���ؼ� �м� *//** * �̹ݿ� ����CAP1BAT,CAP11BAT,CAP@BTCH -> APPLPGM DD  CTL PLIM=AYS0412CAP1BAT,CAP11BAT,CAP@BTCH  ->  SYSLIN DDDMBATCH,SYSIN  DD  SUBMIT PROC=AYS0412 * ���� ���� ���� ...IMSBATCH,MBRPBATINTR,MEMPDB2INTR,MEMIKJEFT01 -> SYSTSIN DD *  DSN SYSTEM(DB1A)  RUN PROGRAM(DSNTIAUL)]JAZBEXEC,MBR================ SQL ====================ADUUMAIN,SYSINIKJFT01,SYSIN DD select       ,SYSTSIN DD RUN PROGRAM(=====================================SRPSCTO1 :IDCAMS//SYSIN    DD    *                                                      00011900     REPRO  INFILE(INPUT)     -                                         00012000            OUTFILE(OUTPUT)//SYSIN    DD *                                                         00032200           DELETE PCATC74.RP.RPSCINSA.KE3 CL PURGESNBBK201//CLBMJ301 EXEC RUNPROC,DYNAMNBR=20,REGION=4M//SYSTSIN  DD  *                                                        00000250  DSN  SYSTEM(DSNB)                                                     00000260  RUN  PROGRAM(NBBBK201) PLAN(NBBZ000P) LIB('KLB.BATCH.LOADLIBN')       00000270  END*/package changeminer.HandlerForRA;import java.sql.SQLException;import java.util.ArrayList;import java.util.Iterator;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;import com.itplus.cm.parser.common.CMParserCommonData;import com.itplus.cm.ce.addon.common.custom.HandlerForRA;import com.itplus.cm.ce.internal.meta.CM_OBJ;import com.itplus.cm.ce.internal.meta.CM_SRC;import com.itplus.cm.ce.util.Environment;import com.itplus.cm.ce.util.FileUtil;import extractor.common.tobj.TDpd;import extractor.common.tobj.TLocation;import extractor.common.tobj.TMeta;import extractor.common.tobj.TObj;import extractor.common.tobj.TResult;public class HD_COM_JCL extends HandlerForRA {	/**	*	*/	private static final long serialVersionUID = -3303948929891991953L;	public final static int CALL_PGM = 1300002;	public final static int CALL_PROC = 1300001;	public final static int CALL_DSN = 1300003;	public final static int USE_DD = 1300007;	public final static int USE_DSN = 1300008;	public final static int TYPE_EXEC_PGM = 1;	public final static int TYPE_DD_PGM = 2;	public final static int TYPE_DD_DSN = 3;	public final static int TYPE_DD_SQL = 4;	public final static String USE_SQL_PGM = "DSNTIAUL";	ArrayList jcllist = null;	public HD_COM_JCL() {	}	/**	*	**/	private void init_jcl() {		jcllist = new ArrayList();		jcllist.add(new jcl_struct("*","MODULE",TYPE_EXEC_PGM,null));		//jcllist.add(new jcl_struct("PBATINTR","MEM",TYPE_EXEC_PGM,null));		//jcllist.add(new jcl_struct("PDB2INTR","MEM",TYPE_EXEC_PGM,null));		//jcllist.add(new jcl_struct("JAZBEXEC","MBR",TYPE_EXEC_PGM,null));//		jcllist.add(new jcl_struct("CAP1BAT","APPLPGM",TYPE_DD_PGM,"CTL[\\s]+PLIM=([A-Za-z0-9#@\\.]+)"));		//jcllist.add(new jcl_struct("IKJEFT01","SYSTSIN",TYPE_DD_PGM,"RUN[\\s]+PROGRAM\\(([^\\)]+)"));		jcllist.add(new jcl_struct("*","ACPCTL01",TYPE_DD_PGM,"\\./\\s+CTL\\s+[^\\s]+\\s+[^\\s]+\\s+([^\\s]+)\\s+"));		// jcllist.add(new jcl_struct("IKJEFT01","SYSIN",TYPE_DD_SQL,null));		// delete (aaa), delete aaa		jcllist.add(new jcl_struct("IDCAMS","SYSIN",TYPE_DD_DSN,"DEL[\\s]+\\(*([A-Za-z0-9#@\\.]+)"));	}	public int addAnalyzeStep(CMParserCommonData data, CM_SRC cm_src, TResult tresult) throws Exception {		if(jcllist == null) {			init_jcl();		}		String file_name = Environment.getSourceDir() + cm_src.getCOLLECT_ID() + cm_src.getSPATH() + cm_src.getSNAME();		log.debug("addAnalyzeStep",file_name);		TObj rootobj= tresult.getTObjList()[0];		//jclExtractionTObj(rootobj, 0);		// firstflag = true;		jclExtractionTObj(rootobj, 0);		return RETURN_CONTINUE;	}	/**	* ���� �޼ҵ�	**/	public String[] find_pattern(String str, String patternstr) {		if(str == null) return null;		log.debug("pattern="+patternstr, str );;		Pattern p = Pattern.compile(patternstr); //==?=		// ���Ͽ� ���� �Է� ���ڿ��� �ɰ���.		Matcher m = p.matcher(str);		ArrayList lst = new ArrayList();		while (m.find()){			lst.add(m.group(1));			log.debug("find", m.group(1));		}		/*		if(m.find()){			int cnt = m.groupCount();			for(int i = 0 ; i <= cnt ; i++){				if(i == 0) { continue; }				lst.add(m.group(1));			}		}		*/		return (String[]) lst.toArray(new String[0]);	}	/**	*	**/	public String getName() {		return this.getClass().getName();	}	private void jclExtractionTObj(TObj base, int depth) {		TObj[] temp = base.getTObjList();		String tab = new String();		for (int i = 0; i < depth * 4; i ++){			tab += " ";		}		for (int i = 0; i < temp.length; i++) {			//log.trace("","-------------------------------------------------------------------------------------");			//log.trace("",tab + "OBJECT, Depth=" + depth + ", Type=" + temp[i].getType() + ", Name="+ temp[i].getName() + ",seq=" + temp[i].getTLocation() + ":" +  temp[i].getSeqNum());			//log.trace("","-------------------------------------------------------------------------------------");			TDpd[] tDpd = temp[i].getTDpdList();			//System.out.println("===========> tDpd = " + tDpd);			if (tDpd != null) {				int iCnt = tDpd.length ;				//log.trace("","===========> tDpd.length = " + iCnt);				for ( int j = 0 ; j < iCnt ; j++) {					if((tDpd[j].getType() == CALL_PGM || tDpd[j].getType() == CALL_PROC)							&& tDpd[j].getName() != null){						String name = tDpd[j].getName();						System.out.println("*********************** " + name);						for ( int k = 0; k < jcllist.size(); k ++) {							jcl_struct jcl = (jcl_struct)jcllist.get(k);							//if(jcl.pgm.equals(name) || jcl.pgm.equals("*")) {								process_pgm(temp[i], jcl, tDpd[j]);							//}						}					}				}			} 			TObj[] temp_sub = temp[i].getTObjList();			if (temp_sub != null) {				jclExtractionTObj(temp[i], depth + 1);			}		}	}	private void process_exec_pgm(TObj obj, jcl_struct jcl, TDpd dpd) {		TMeta tMeta[] = obj.getTMetaList();		boolean isFind = false;		TObj[] targetObj = obj.getTObjList();		for (int i = 0; i < targetObj.length; i++) {			if(targetObj[i].getType() == 130006) {// DD				if(targetObj[i].getName().endsWith("." + "ACPCTL01")) {					isFind = true;				}			}		}        if (tMeta != null) {            int iCnt = tMeta.length ;			for ( int j = 0 ; j < iCnt ; j++) {				if(jcl.dd.equals(tMeta[j].getName())) {					String value = tMeta[j].getValue();					if(!isFind){						TDpd adddpd =  new TDpd(CALL_PGM, value, value, 100, obj.getTLocation() );						for(int j2 = 0 ; j2 < obj.getTDpdList().length ; j2++){							if(obj.getTDpdList()[j2].getType() == USE_DD){								String target = value + "." + obj.getTDpdList()[j2].getName();								obj.getTDpdList()[j2].setGID(target);								TMeta ddmeta = new TMeta(1000, "1311569", value, obj.getTLocation());								//ddnames.add(obj.getTDpdList()[j2].getName());								obj.getTDpdList()[j2].add(ddmeta);							}						}						for(int j2 = 0 ; j2 < obj.getTDpdList().length ; j2++){							if(obj.getTDpdList()[j2].getType() == USE_DSN){								TMeta ddmeta = new TMeta(1000, "1311569", value, obj.getTLocation());								obj.getTDpdList()[j2].add(ddmeta);								for(int j3 = 0 ; j3 < obj.getTObjList().length ; j3++){									TObj ddObj = obj.getTObjList()[j3];									if(ddObj.getType() == 130006){ // DD obj										for(int j4 = 0 ; j4 < ddObj.getTDpdList().length ; j4 ++){											String ddName = ddObj.getName().substring(ddObj.getName().lastIndexOf(".")+1);											TMeta ddmeta2 = new TMeta(1000, "1311567", ddName, obj.getTLocation());											obj.getTDpdList()[j2].add(ddmeta2);										}									}								}							}						}						//TMeta ddmeta = new TMeta(1000, "1311569", cobol, obj.getTLocation());						obj.add(adddpd);					}					log.debug("add="+jcl.dd, value);					break;				}			}        }	}	private void process_dd_pgm(TObj obj, jcl_struct jcl, TDpd dpd) {		TObj[] temp = obj.getTObjList();		for (int i = 0; i < temp.length; i++) {			if(temp[i].getType() == 130006) {// DD				if(temp[i].getName().endsWith("." + jcl.dd)) {					TMeta tMeta[] = temp[i].getTMetaList();			        if (tMeta != null) {			            int iCnt = tMeta.length ;						for ( int j = 0 ; j < iCnt ; j++) {							String value = tMeta[j].getValue();							String retstr[] = find_pattern(value, jcl.pstr);							if(retstr.length > 0) {								for ( int k = 0; k < retstr.length; k ++) {									if(retstr[k].equals("PA61573X")){										retstr[k] = "OnlineCobol";									}									TDpd adddpd =  new TDpd(CALL_PGM, retstr[k], retstr[k], 100, temp[i].getTLocation() );									/*									for(int j2 = 0 ; j2 < obj.getTDpdList().length ; j2++){										if(obj.getTDpdList()[j2].getType() == USE_DD){											String target = value + "." + obj.getTDpdList()[j2].getName();											obj.getTDpdList()[j2].setGID(target);											TMeta ddmeta = new TMeta(1000, "1311569", value, obj.getTLocation());											//ddnames.add(obj.getTDpdList()[j2].getName());											obj.getTDpdList()[j2].add(ddmeta);										}									}									for(int j2 = 0 ; j2 < obj.getTDpdList().length ; j2++){										if(obj.getTDpdList()[j2].getType() == USE_DSN){											TMeta ddmeta = new TMeta(1000, "1311569", value, obj.getTLocation());											obj.getTDpdList()[j2].add(ddmeta);											for(int j3 = 0 ; j3 < obj.getTObjList().length ; j3++){												TObj ddObj = obj.getTObjList()[j3];												if(ddObj.getType() == 130006){ // DD obj													for(int j4 = 0 ; j4 < ddObj.getTDpdList().length ; j4 ++){														String ddName = ddObj.getName().substring(ddObj.getName().lastIndexOf(".")+1);														TMeta ddmeta2 = new TMeta(1000, "1311567", ddName, obj.getTLocation());														obj.getTDpdList()[j2].add(ddmeta2);													}												}											}										}									}									*/									obj.add(adddpd);									log.debug("add="+jcl.dd, value);									if(retstr[k].equals(USE_SQL_PGM)) {										jcl_struct tmpjcl = new jcl_struct("","SYSIN",TYPE_DD_SQL,"");										process_dd_sql(obj,tmpjcl,dpd);									}								}								return ;							}						}			        }				}			}		}	}	private void process_dd_sql(TObj obj, jcl_struct jcl, TDpd dpd) {		TObj[] temp = obj.getTObjList();		for (int i = 0; i < temp.length; i++) {			if(temp[i].getType() == 130006) {// DD				if(temp[i].getName().endsWith("." + jcl.dd)) {					TMeta tMeta[] = temp[i].getTMetaList();			        if (tMeta != null) {			            int iCnt = tMeta.length ;						for ( int j = 0 ; j < iCnt ; j++) {							String value = tMeta[j].getValue();					        String str = value.toUpperCase().trim();					        if (str.startsWith("SELECT") || str.startsWith("INSERT") || str.startsWith("DELETE")					        		|| str.startsWith("UPDATE")) {								TDpd adddpd =  new TDpd(1009001, value,value, 100, temp[i].getTLocation() );								obj.add(adddpd);								log.debug("addsql="+jcl.dd, value);								return ;					        }						}			        }				}			}		}	}	private void process_dd_dsn(TObj obj, jcl_struct jcl, TDpd dpd) {		TObj[] temp = obj.getTObjList();		for (int i = 0; i < temp.length; i++) {			if(temp[i].getType() == 130006) {// DD				log.trace("DD", temp[i].getName() +"=" + jcl.dd);				if(temp[i].getName().endsWith("." + jcl.dd)) {					TMeta tMeta[] = temp[i].getTMetaList();			        if (tMeta != null) {			            int iCnt = tMeta.length ;						for ( int j = 0 ; j < iCnt ; j++) {							String value = tMeta[j].getValue();							String retstr[] = find_pattern(value, jcl.pstr);							if(retstr.length > 0) {								for ( int k = 0; k < retstr.length; k ++) {									TDpd adddpd =  new TDpd(CALL_DSN, retstr[k], retstr[k], 100, temp[i].getTLocation() );									obj.add(adddpd);									log.debug("add="+jcl.dd, value);								}								return ;							}						}			        }				}			}		}	}	private void process_pgm(TObj obj, jcl_struct jcl, TDpd dpd) {		log.debug("type="+jcl.type, jcl.pgm);		if(jcl.type == TYPE_EXEC_PGM) {			process_exec_pgm(obj,jcl,dpd);		}		else if(jcl.type == TYPE_DD_PGM) {			process_dd_pgm(obj,jcl,dpd);		}		else if(jcl.type == TYPE_DD_DSN) {			process_dd_dsn(obj,jcl,dpd);		}		else if(jcl.type == TYPE_DD_SQL) {			process_dd_sql(obj,jcl,dpd);		}		else {			log.debug("unknown type ", "" + jcl.type );		}	}	/**	*	**/	public int doTObj(int depth, CM_SRC cm_src, TObj tobj, long parent_object_id) {/*		if (depth == 0) {			log.debug("doTObj", "depth == 0");		}		if (firstflag) {			log.debug("doTObj","firstflag="+firstflag);			firstflag = false;			jclExtractionTObj(tobj, depth);		}		log.trace("HANDLER", depth + " : " + tobj.getName() + " : " + tobj.getTempMap());*/		return RETURN_CONTINUE;	}	/**	*	**/	public int doTDpd(int depth, TDpd tdpd, CM_SRC cm_src, CM_OBJ cm_obj, int seq) throws SQLException {		if(tdpd.getName() == null){			return RETURN_BREAK;		}		// log.trace("HANDLER", depth + " : " + tdpd.getName() + " : " + tdpd.getTempMap());		return RETURN_CONTINUE;	}	/**	*	**/	public TResult getTTresult() {		// TODO Auto-generated method stub		return null;	}	/**	*	**/    public long generateGID(String prefix, TObj tobj) {        return 0L;    }	/**	*	**/	public long generateGID(String prefix, TDpd tdpd) {		if(tdpd.getType() == USE_DD){			System.out.println("*******************************");			System.out.println("USE_DD GID >> " + tdpd.getGID());			System.out.println("USE_DD NAME >> " + tdpd.getName());			String pgm = tdpd.getGID().substring(0, tdpd.getGID().indexOf("."))+ "." + tdpd.getName();			System.out.println("New GID >> " + pgm);			return FileUtil.getGID(prefix, pgm);		}		if (tdpd.getType() == CALL_PGM   ) {    		String preFix = "<COBOL>";    		return FileUtil.getGID(preFix, tdpd.getName());		}		return 0L;	}	class jcl_struct {		String pgm;		String dd;		int type;		String pstr;		jcl_struct(String program, String dd_name, int type, String patternstr) {			pgm = program;			dd = dd_name;			this.type = type;			pstr = patternstr;		}	}}