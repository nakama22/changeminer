package changeminer.HandlerForRA;import java.sql.SQLException;import java.util.HashMap;import com.itplus.cm.parser.common.CMParserCommonData;import com.itplus.cm.ce.addon.common.custom.HandlerForRA;import com.itplus.cm.ce.internal.meta.CM_OBJ;import com.itplus.cm.ce.internal.meta.CM_SRC;import com.itplus.cm.ce.util.Environment;import com.itplus.cm.ce.util.FileUtil;import extractor.common.tobj.TDpd;import extractor.common.tobj.TMeta;import extractor.common.tobj.TObj;import extractor.common.tobj.TResult;public class HD_COM_JCL_COPY extends HandlerForRA {	public final static int CALL_PGM = 1300002;	public final static int CALL_PROC = 1300001;	public final static int USE_DD = 1300007;	public final static int CALL_YES_PGM = 1300009;	public final static int EXEC_OBJECT = 130005;	public final static int DD_OBJECT = 130006;	public final static String CALL_YES_MODULE_STR = "ACPCTL01";	public HD_COM_JCL_COPY() {	}	public int addAnalyzeStep(CMParserCommonData data, CM_SRC cm_src, TResult tresult) throws Exception {		String file_name = Environment.getSourceDir() + cm_src.getCOLLECT_ID() + cm_src.getSPATH() + cm_src.getSNAME();		log.debug("addAnalyzeStep",file_name);		TObj rootobj= tresult.getTObjList()[0];		jclExtractionTObj(rootobj, 0);		return RETURN_CONTINUE;	}	public String getName() {		return this.getClass().getName();	}	private void jclExtractionTObj(TObj base, int depth) {		System.out.println("depth >>>>>>>>>>>>>> " + depth);		TObj[] temp = base.getTObjList();		String tab = new String();		for (int i = 0; i < depth * 4; i ++){			tab += " ";		}		HashMap<String,ModuleInfo> exeCallModules = new HashMap<String,ModuleInfo>();		HashMap<String,YesModuleInfo> yesModules = new HashMap<String,YesModuleInfo>();		for (int i = 0; i < temp.length; i++) {			TDpd[] tDpd = temp[i].getTDpdList();			if (tDpd != null) {								int iCnt = tDpd.length ;				for ( int j = 0 ; j < iCnt ; j++) {					if(temp[i].getType() == EXEC_OBJECT){						if(tDpd[j].getType() == USE_DD){							String name = tDpd[j].getName();							if(name.equals(CALL_YES_MODULE_STR)){								System.out.println("|||||||||||||||||||||||||||||||||||");								System.out.println("Match YES MODULE >> " + CALL_YES_MODULE_STR);								TMeta[] metas = temp[i].getTMetaList();								String metaValue = null;								for(int j2 = 0 ; j2 < metas.length ; j2++){									System.out.println("DPD >> " + tDpd[j].getName());									System.out.println("OBJ >> " + temp[i].getName());									System.out.println("MODULE >> " + metas[j2].getValue());									System.out.println("		Meta name >> " + metas[j2].getName());									System.out.println("		Meta value >> " + metas[j2].getValue());									if(metas[j2].getName().equals("MODULE")){										metaValue = metas[j2].getValue();										yesModules.put(tDpd[j].getName(), new YesModuleInfo(tDpd[j].getName(), temp[i].getName(), metas[j2].getValue(), metas, temp[i]));									}								}								if(metaValue != null){									TDpd adddpd =  new TDpd(CALL_YES_PGM, metaValue, metaValue, 100, temp[i].getTLocation() );									System.out.println("Match MetaValue >> " + metaValue);								}																															}						}						if(tDpd[j].getType() == CALL_PROC){							TMeta[] metas = temp[i].getTMetaList();							String metaValue = null;							for(int j2 = 0 ; j2 < metas.length ; j2++){								//System.out.println("		Meta name >> " + metas[j2].getName());								//System.out.println("		Meta value >> " + metas[j2].getValue());								if(metas[j2].getName().equals("MODULE")){									metaValue = metas[j2].getValue();									System.out.println("DPD >> " + tDpd[j].getName());									System.out.println("OBJ >> " + temp[i].getName());									System.out.println("MODULE >> " + metas[j2].getValue());									exeCallModules.put(tDpd[j].getName(), new ModuleInfo(tDpd[j].getName(), temp[i].getName(), metas[j2].getValue(), metas, temp[i]));								}							}							if(metaValue != null){								//TDpd adddpd =  new TDpd(CALL_YES_PGM, metaValue, metaValue, 100, temp[i].getTLocation() );								//temp[i].add(adddpd);							}						}						/*						if(tDpd[j].getType() == USE_DD){							String name = tDpd[j].getName();							if(name.equals(CALL_YES_MODULE_STR)){								System.out.println("********************************");								//String name = tDpd[j].getName();								System.out.println("OBJ getType >> " + temp[i].getType());								System.out.println("OBJ Name >> " +temp[i].getName());								System.out.println("DPD getType >> " + tDpd[j].getType());								System.out.println("DPD Name >> " + tDpd[j].getName());								TMeta[] metas = temp[i].getTMetaList();								String metaValue = null;								for(int j2 = 0 ; j2 < metas.length ; j2++){									System.out.println("		Meta name >> " + metas[j2].getName());									System.out.println("		Meta value >> " + metas[j2].getValue());									if(metas[j2].getName().equals("MODULE")){										metaValue = metas[j2].getValue();									}								}								if(metaValue != null){									TDpd adddpd =  new TDpd(CALL_YES_PGM, metaValue, metaValue, 100, temp[i].getTLocation() );									temp[i].add(adddpd);								}							}						}else{							System.out.println("|||||||||||||||||||||||||||||||||||");							//String name = tDpd[j].getName();							System.out.println("OBJ getType >> " + temp[i].getType());							System.out.println("OBJ Name >> " +temp[i].getName());							System.out.println("DPD getType >> " + tDpd[j].getType());							System.out.println("DPD Name >> " + tDpd[j].getName());							TMeta[] metas = temp[i].getTMetaList();							String metaValue = null;							for(int j2 = 0 ; j2 < metas.length ; j2++){								System.out.println("		Meta name >> " + metas[j2].getName());								System.out.println("		Meta value >> " + metas[j2].getValue());								if(metas[j2].getName().equals("MODULE")){									metaValue = metas[j2].getValue();								}							}							if(metaValue != null){								TDpd adddpd =  new TDpd(CALL_YES_PGM, metaValue, metaValue, 100, temp[i].getTLocation() );								temp[i].add(adddpd);							}						}						*/					}					/*					if(temp[i].getType() == 130006) {						System.out.println("\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");						String name = tDpd[j].getName();						System.out.println("Type >> " + tDpd[j].getType());						System.out.println("name >> " + name);						System.out.println("depth >> " + depth);						TMeta[] metas = temp[i].getTMetaList();						for(int j2 = 0 ; j2 < metas.length ; j2++){							System.out.println("		Meta name >> " + metas[j2].getName());							System.out.println("		Meta value >> " + metas[j2].getValue());						}					}					if((tDpd[j].getType() == CALL_PGM || tDpd[j].getType() == CALL_PROC) && tDpd[j].getName() != null){						String name = tDpd[j].getName();						System.out.println("********************************");						System.out.println("Type >> " + tDpd[j].getType());						System.out.println("name >> " + name);						System.out.println("depth >> " + depth);						TMeta[] metas = temp[i].getTMetaList();						for(int j2 = 0 ; j2 < metas.length ; j2++){							System.out.println("		Meta name >> " + metas[j2].getName());							System.out.println("		Meta value >> " + metas[j2].getValue());						}					}					*/				}			} 			TObj[] temp_sub = temp[i].getTObjList();			if (temp_sub != null) {				jclExtractionTObj(temp[i], depth + 1);			}		}	}	public int doTObj(int depth, CM_SRC cm_src, TObj tobj, long parent_object_id) {		return RETURN_CONTINUE;	}	public int doTDpd(int depth, TDpd tdpd, CM_SRC cm_src, CM_OBJ cm_obj, int seq) throws SQLException {		if(tdpd.getName() == null){			return RETURN_BREAK;		}		// log.trace("HANDLER", depth + " : " + tdpd.getName() + " : " + tdpd.getTempMap());		return RETURN_CONTINUE;	}	/**	*	**/	public TResult getTTresult() {		// TODO Auto-generated method stub		return null;	}	/**	*	**/    public long generateGID(String prefix, TObj tobj) {        return 0L;    }	/**	*	**/	public long generateGID(String prefix, TDpd tdpd) {		if (tdpd.getType() == CALL_YES_PGM   ) {    		String preFix = "<COBOL>";    		System.out.println("generateGID >> " + tdpd.getName());    		return FileUtil.getGID(preFix, tdpd.getName());		}		return 0L;	}	public class ModuleInfo{		public String procName;		public String stepFullName;		public String stepName;		public String moduleName;		public TMeta[] metas;		public TObj rootObj;		public ModuleInfo(){}		public ModuleInfo(String pn, String sn, String mn, TMeta[] mts, TObj ro){			procName = pn;			if(sn.contains(".")){				stepName = sn.substring(sn.indexOf(".")+1);				System.out.println("ModuleInfo >> " + stepName);			}else{				stepName = sn;			}			stepFullName = sn;			moduleName = mn;			metas = mts;			rootObj = ro;		}	}	public class YesModuleInfo{		public String ddName;		public String stepFullName;		public String stepName;		public String moduleName;		public TMeta[] metas;		public TObj rootObj;		public YesModuleInfo(){}		public YesModuleInfo(String dn, String sn, String mn, TMeta[] mts, TObj ro){			ddName = dn;			if(sn.contains(".")){				stepName = sn.substring(sn.indexOf(".")+1);				System.out.println("ModuleInfo >> " + stepName);			}else{				stepName = sn;			}			stepFullName = sn;			moduleName = mn;			metas = mts;			rootObj = ro;		}	}}